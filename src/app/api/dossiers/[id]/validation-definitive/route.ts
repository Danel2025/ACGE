import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/lib/supabase-server'
import { NotificationsByRole } from '@/lib/notifications-by-role'
import { CacheRevalidation } from '@/lib/revalidation-utils'

/**
 * üîí API VALIDATION D√âFINITIVE - ACGE
 *
 * Validation d√©finitive d'un dossier par l'Agent Comptable
 * apr√®s v√©rification du rapport de v√©rification
 */

// Forcer le mode dynamique (pas de cache statique)
export const dynamic = 'force-dynamic'
export const revalidate = 0
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params
    const id = resolvedParams.id
    
    console.log('üîí Validation d√©finitive dossier:', id)
    
    const body = await request.json()
    const { commentaire } = body
    
    const admin = getSupabaseAdmin()
    
    if (!admin) {
      return NextResponse.json(
        { error: 'Service de base de donn√©es indisponible' },
        { status: 503 }
      )
    }
    
    // R√©cup√©rer le dossier avec toutes les informations
    const { data: dossier, error: fetchError } = await admin
      .from('dossiers')
      .select(`
        *,
        poste_comptable:posteComptableId(*),
        nature_document:natureDocumentId(*),
        secretaire:secretaireId(id, name, email)
      `)
      .eq('id', id)
      .single()

    if (fetchError) {
      return NextResponse.json(
        { error: 'Dossier non trouv√©' },
        { status: 404 }
      )
    }

    // V√©rifier que le dossier est valid√© par l'Ordonnateur
    if (dossier.statut !== 'VALID√â_ORDONNATEUR') {
      return NextResponse.json(
        { error: 'Seuls les dossiers valid√©s par l\'Ordonnateur peuvent √™tre valid√©s d√©finitivement' },
        { status: 400 }
      )
    }

    // V√©rifier que les v√©rifications ordonnateur sont compl√®tes
    const { data: syntheseOrdonnateur, error: syntheseError } = await admin
      .from('syntheses_verifications_ordonnateur')
      .select('*')
      .eq('dossier_id', id)
      .maybeSingle()

    if (syntheseError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la synth√®se ordonnateur:', syntheseError)
      return NextResponse.json(
        {
          error: 'Erreur lors de la v√©rification des validations ordonnateur',
          details: syntheseError.message || 'Erreur inconnue'
        },
        { status: 500 }
      )
    }

    if (!syntheseOrdonnateur) {
      console.error('‚ùå Synth√®se ordonnateur manquante pour le dossier:', id)
      return NextResponse.json(
        {
          error: 'Les v√©rifications ordonnateur doivent √™tre effectu√©es avant la validation d√©finitive',
          details: 'Aucune synth√®se de v√©rifications trouv√©e pour ce dossier'
        },
        { status: 400 }
      )
    }

    if (syntheseOrdonnateur.statut !== 'VALID√â') {
      console.error('‚ùå Synth√®se ordonnateur non valid√©e:', syntheseOrdonnateur.statut)
      return NextResponse.json(
        {
          error: `Les v√©rifications ordonnateur doivent √™tre toutes valid√©es (statut actuel: ${syntheseOrdonnateur.statut})`,
          details: `${syntheseOrdonnateur.verifications_rejetees || 0} v√©rification(s) rejet√©e(s) sur ${syntheseOrdonnateur.total_verifications || 0}`
        },
        { status: 400 }
      )
    }

    // Mettre √† jour le statut du dossier
    const { data: updatedDossier, error: updateError } = await admin
      .from('dossiers')
      .update({
        statut: 'VALID√â_D√âFINITIVEMENT',
        validationDefinitiveComment: commentaire?.trim() || null,
        validatedDefinitivelyAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })
      .eq('id', id)
      .select(`
        *,
        poste_comptable:posteComptableId(*),
        nature_document:natureDocumentId(*),
        secretaire:secretaireId(id, name, email)
      `)
      .single()

    if (updateError) {
      console.error('‚ùå Erreur validation d√©finitive dossier:', updateError)
      return NextResponse.json(
        { error: 'Erreur lors de la validation d√©finitive' },
        { status: 500 }
      )
    }

    console.log('üîí Dossier valid√© d√©finitivement avec succ√®s:', updatedDossier.numeroDossier)

    // üîÑ REVALIDATION DU CACHE - Invalider les caches concern√©s
    try {
      await CacheRevalidation.revalidateValidationDefinitive(id)
      console.log('üîÑ Cache Next.js invalid√© apr√®s validation d√©finitive')
    } catch (revalidateError) {
      console.warn('‚ö†Ô∏è Erreur lors de la revalidation du cache:', revalidateError)
      // Ne pas faire √©chouer la validation pour un probl√®me de cache
    }

    // üîî NOTIFICATIONS INTELLIGENTES PAR R√îLE
    try {
      const notificationService = new NotificationsByRole()

      await notificationService.notifyValidationDefinitive({
        dossierId: updatedDossier.id,
        numeroDossier: updatedDossier.numeroDossier,
        objetOperation: updatedDossier.objetOperation,
        beneficiaire: updatedDossier.beneficiaire,
        posteComptable: updatedDossier.poste_comptable?.intitule || 'Non d√©fini',
        montant: updatedDossier.montantOrdonnance || 0,
        commentaire: commentaire?.trim() || null,
        validatedAt: updatedDossier.validatedDefinitivelyAt
      })

      console.log('üîî Notifications de validation d√©finitive envoy√©es')
    } catch (notificationError) {
      console.warn('‚ö†Ô∏è Erreur notifications validation d√©finitive:', notificationError)
      // Ne pas faire √©chouer la validation pour un probl√®me de notification
    }

    return NextResponse.json(
      {
        success: true,
        message: `Dossier ${updatedDossier.numeroDossier} valid√© d√©finitivement avec succ√®s`,
        dossier: updatedDossier
      },
      {
        headers: {
          'Cache-Control': 'private, no-cache, no-store, max-age=0, must-revalidate'
        }
      }
    )

  } catch (error) {
    console.error('‚ùå Erreur validation d√©finitive:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    )
  }
}
