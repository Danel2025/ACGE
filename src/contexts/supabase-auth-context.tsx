'use client'

import React, { createContext, useContext, useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

const supabase = createClient(supabaseUrl, supabaseAnonKey)

interface User {
  id: string
  email: string
  name: string
  role: string
}

interface AuthContextType {
  user: User | null
  isLoading: boolean
  login: (email: string, password: string) => Promise<boolean>
  logout: () => Promise<void>
  refreshUser: () => Promise<void>
  forceReloadFromAPI: () => Promise<void>
  resetAuthState: () => void
  getAccessToken: () => Promise<string | null>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function SupabaseAuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()

  // Fonction pour logger les changements d'utilisateur
  const logUserChange = (from: string, newUser: User | null, oldUser: User | null) => {
    console.log(`üîÑ User change [${from}]:`)
    console.log(`  - Ancien:`, oldUser ? `${oldUser.email} (${oldUser.role})` : 'null')
    console.log(`  - Nouveau:`, newUser ? `${newUser.email} (${newUser.role})` : 'null')

    if (oldUser && newUser && oldUser.role !== newUser.role) {
      console.warn(`‚ö†Ô∏è R√îLE CHANG√â [${from}]: ${oldUser.role} ‚Üí ${newUser.role}`)
      console.warn(`‚ö†Ô∏è Redirection potentielle de ${newUser.role} vers cb-dashboard`)
    }
  }

  // Wrapper pour setUser avec logging
  const setUserWithLogging = (newUser: User | null) => {
    const oldUser = user
    setUser(newUser)
    logUserChange('setUserWithLogging', newUser, oldUser)
  }

  // V√©rifier l'authentification au chargement
  useEffect(() => {
    checkAuth()
    
    // √âcouter les changements d'authentification
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN' && session) {
          await loadUserData(session.user)
        } else if (event === 'SIGNED_OUT') {
          setUser(null)
        }
      }
    )

    return () => subscription.unsubscribe()
  }, [])

  const checkAuth = async () => {
    try {
      // S√âCURIT√â : V√©rifier le consentement aux cookies avant de tenter une reconnexion automatique
      const sessionConsent = sessionStorage.getItem('cookie-consent')
      const persistentConsent = localStorage.getItem('cookie-consent-persistent')
      const hasValidConsent = sessionConsent === 'accepted' || persistentConsent === 'accepted'
      const isTemporaryDecline = sessionConsent === 'declined-temp'

      // PRIORIT√â ABSOLUE : V√©rifier le localStorage d'abord (donn√©es de connexion r√©cente)
      const storedAuth = localStorage.getItem('acge-auth')
      if (storedAuth && hasValidConsent) {
        try {
          const parsed = JSON.parse(storedAuth)
          // V√©rifier le timestamp pour s'assurer que les donn√©es sont r√©centes (moins de 30 minutes)
          const isRecent = parsed.timestamp && (Date.now() - parsed.timestamp < 30 * 60 * 1000)

          if (parsed.user && parsed.user.role && isRecent && parsed.source === 'JWT_LOGIN') {
            console.log('üíæ Utilisateur trouv√© dans localStorage (r√©cents et authentiques):', parsed.user.email, parsed.user.role)
            console.log('‚è∞ Timestamp localStorage:', new Date(parsed.timestamp).toLocaleTimeString())
            console.log('üîó Source localStorage:', parsed.source)
            console.log('üç™ Consentement cookies valid√©')
            setUserWithLogging({
              id: parsed.user.id,
              email: parsed.user.email,
              name: parsed.user.name,
              role: parsed.user.role
            })
            setIsLoading(false)
            return
          } else if (parsed.timestamp) {
            console.log('‚ö†Ô∏è Donn√©es localStorage trop anciennes ou pas de source authentique, suppression')
            console.log('‚ö†Ô∏è Source localStorage:', parsed.source)
            console.log('‚ö†Ô∏è Timestamp localStorage:', new Date(parsed.timestamp).toLocaleTimeString())
            localStorage.removeItem('acge-auth')
          }
        } catch (e) {
          console.log('‚ö†Ô∏è Erreur parsing localStorage:', e)
          localStorage.removeItem('acge-auth') // Nettoyer les donn√©es corrompues
        }
      } else if (storedAuth && !hasValidConsent && !isTemporaryDecline) {
        console.log('üõ°Ô∏è Reconnexion automatique bloqu√©e - consentement cookies requis')
        localStorage.removeItem('acge-auth') // Nettoyer pour forcer une nouvelle connexion
      } else if (storedAuth && isTemporaryDecline) {
        console.log('‚è≥ Consentement temporairement refus√©, donn√©es conserv√©es pour nouvelle tentative')
      }

      // SECONDE CHANCE : Essayer l'API /api/auth/me seulement si pas de localStorage valide ET consentement valid√©
      if (hasValidConsent) {
        console.log('üîç V√©rification auth via API /api/auth/me (fallback avec consentement)...')
        const response = await fetch('/api/auth/me', {
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        })

        if (response.ok) {
          const data = await response.json()
          if (data.success && data.user) {
            console.log('‚úÖ Utilisateur trouv√© via API auth/me:', data.user.email, data.user.role)
            console.log('üîç Donn√©es compl√®tes via API:', data)
            console.log('üç™ Consentement cookies valid√© pour API')

            setUserWithLogging({
              id: data.user.id,
              email: data.user.email,
              name: data.user.name,
              role: data.user.role
            })
            setIsLoading(false)
            return
          }
        } else if (response.status === 401) {
          // 401 est normal quand l'utilisateur n'est pas connect√©, ne pas logger d'erreur
          console.log('‚ÑπÔ∏è Aucune session active (401 - comportement normal)')
        }
      } else {
        console.log('üõ°Ô∏è V√©rification API bloqu√©e - consentement cookies requis')
      }

      // DERNIER RECOURS : Supabase Auth
      console.log('üîç V√©rification via Supabase Auth (dernier recours)...')
      const { data: { session } } = await supabase.auth.getSession()
      if (session?.user) {
        await loadUserData(session.user)
      } else {
        console.log('‚ùå Aucune authentification trouv√©e')
        setUserWithLogging(null)
      }
    } catch (error) {
      console.error('Erreur v√©rification auth:', error)
      setUserWithLogging(null)
    } finally {
      setIsLoading(false)
    }
  }

  const loadUserData = async (authUser: any) => {
    try {
      // R√©cup√©rer le token d'acc√®s
      const { data: { session } } = await supabase.auth.getSession()
      if (!session?.access_token) {
        console.error('Aucun token d\'acc√®s disponible')
        setUser(null)
        return
      }

      console.log('üîê Chargement donn√©es utilisateur pour:', authUser.email)

      // Utiliser l'API sp√©cifique pour r√©cup√©rer l'utilisateur connect√©
      const response = await fetch('/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${session.access_token}`
        }
      })

      if (!response.ok) {
        console.error('Erreur API auth/me:', response.status, response.statusText)
        setUser(null)
        return
      }

      const data = await response.json()
      if (!data.success || !data.user) {
        console.error('Erreur donn√©es API auth/me:', data)
        setUser(null)
        return
      }

      console.log('‚úÖ Utilisateur charg√©:', data.user.name, data.user.role)

      setUserWithLogging({
        id: data.user.id,
        email: data.user.email,
        name: data.user.name,
        role: data.user.role
      })
    } catch (error) {
      console.error('Erreur loadUserData:', error)
      setUserWithLogging(null)
    }
  }

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      // Utiliser l'API de connexion JWT au lieu de Supabase Auth
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ email, password }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && data.user) {
          console.log('‚úÖ Connexion r√©ussie via API JWT:', data.user.email, data.user.role)
          console.log('üîç Donn√©es utilisateur apr√®s connexion:', data.user)

          // Synchroniser Supabase Auth avec les donn√©es JWT
          try {
            const { data: { session } } = await supabase.auth.getSession()
            if (session) {
              // Mettre √† jour les m√©tadonn√©es de l'utilisateur dans Supabase Auth
              await supabase.auth.updateUser({
                data: {
                  role: data.user.role,
                  user_id: data.user.id,
                  name: data.user.name
                }
              })
              console.log('‚úÖ Supabase Auth synchronis√© avec les donn√©es JWT')
            }
          } catch (syncError) {
            console.warn('‚ö†Ô∏è Impossible de synchroniser Supabase Auth:', syncError)
          }

          // Mettre √† jour imm√©diatement le localStorage AVANT de modifier l'√©tat
          const userData = {
            id: data.user.id,
            email: data.user.email,
            name: data.user.name,
            role: data.user.role
          }
          localStorage.setItem('acge-auth', JSON.stringify({
            user: userData,
            timestamp: Date.now(), // Ajouter un timestamp pour √©viter les conflits
            source: 'JWT_LOGIN' // Marquer la source pour √©viter les conflits
          }))
          console.log('üíæ localStorage mis √† jour avec:', data.user.email, data.user.role)

          // Mettre √† jour l'√©tat utilisateur
          setUserWithLogging({
            id: data.user.id,
            email: data.user.email,
            name: data.user.name,
            role: data.user.role
          })

          setIsLoading(false)

          return true
        }
      }

      return false
    } catch (error) {
      console.error('Erreur login:', error)
      return false
    }
  }

  const logout = async () => {
    try {
      console.log('üö™ D√©connexion en cours...')

      // 1. D'abord, mettre l'√©tat de chargement pour √©viter les re-renders
      setIsLoading(true)

      // 2. Nettoyer imm√©diatement le localStorage
      localStorage.removeItem('acge-auth')
      console.log('üßπ localStorage nettoy√©')

      // 3. Appeler l'API de d√©connexion
      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      })

      // 4. Nettoyer l'√©tat utilisateur
      setUserWithLogging(null)

      // 5. S'assurer que isLoading est remis √† false apr√®s la d√©connexion
      setIsLoading(false)

      // 6. Redirection fluide avec replace pour √©viter l'historique
      router.replace('/login')

      console.log('‚úÖ D√©connexion termin√©e')
    } catch (error) {
      console.error('‚ùå Erreur logout:', error)
      // En cas d'erreur, forcer la d√©connexion locale
      localStorage.removeItem('acge-auth')
      setUserWithLogging(null)
      setIsLoading(false)
      router.replace('/login')
    }
  }

  const refreshUser = async () => {
    console.log('üîÑ For√ßage du rechargement des donn√©es utilisateur...')
    // Nettoyer le localStorage pour forcer un rechargement depuis l'API
    localStorage.removeItem('acge-auth')
    await checkAuth()
  }

  const resetAuthState = () => {
    console.log('üîÑ R√©initialisation compl√®te de l\'√©tat d\'authentification...')
    setUserWithLogging(null)
    setIsLoading(false)
    localStorage.removeItem('acge-auth')
  }

  const forceReloadFromAPI = async () => {
    console.log('‚ö° Rechargement forc√© depuis l\'API...')
    // Nettoyer compl√®tement et recharger depuis l'API
    localStorage.removeItem('acge-auth')
    setIsLoading(true)

    try {
      const response = await fetch('/api/auth/me', {
        credentials: 'include',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && data.user) {
          console.log('‚úÖ Rechargement forc√© r√©ussi:', data.user.email, data.user.role)
          setUserWithLogging({
            id: data.user.id,
            email: data.user.email,
            name: data.user.name,
            role: data.user.role
          })
          return
        }
      }

      console.log('‚ùå Rechargement forc√© √©chou√©')
      setUserWithLogging(null)
    } catch (error) {
      console.error('Erreur rechargement forc√©:', error)
      setUserWithLogging(null)
    } finally {
      setIsLoading(false)
    }
  }

  const getAccessToken = async (): Promise<string | null> => {
    try {
      // D'abord essayer de r√©cup√©rer le token JWT depuis les cookies
      const response = await fetch('/api/auth/me', {
        credentials: 'include'
      })
      
      if (response.ok) {
        const data = await response.json()
        if (data.success && data.user) {
          // Pour les requ√™tes API, utiliser le token JWT depuis les cookies
          // Le token est automatiquement inclus dans les cookies
          return 'jwt-token-from-cookies'
        }
      }
      
      // Fallback vers Supabase Auth
      const { data: { session } } = await supabase.auth.getSession()
      return session?.access_token || null
    } catch (error) {
      console.error('Erreur r√©cup√©ration token:', error)
      return null
    }
  }

  return (
    <AuthContext.Provider value={{
      user,
      isLoading,
      login,
      logout,
      refreshUser,
      forceReloadFromAPI,
      resetAuthState,
      getAccessToken
    }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useSupabaseAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useSupabaseAuth must be used within a SupabaseAuthProvider')
  }
  return context
}
