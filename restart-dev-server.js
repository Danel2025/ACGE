const { spawn, exec } = require('child_process');
const path = require('path');

// Fonction pour tuer les processus Node.js
function killNodeProcesses() {
  return new Promise((resolve) => {
    exec('taskkill /F /IM node.exe', (error) => {
      // Ignorer les erreurs (pas de processus √† tuer)
      resolve();
    });
  });
}

// Fonction pour d√©marrer le serveur de d√©veloppement
function startDevServer() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ D√©marrage du serveur de d√©veloppement...');

    const devServer = spawn('npm', ['run', 'dev'], {
      stdio: 'inherit',
      shell: true
    });

    devServer.on('error', (error) => {
      console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
      reject(error);
    });

    // Attendre un peu pour que le serveur d√©marre
    setTimeout(() => {
      console.log('‚úÖ Serveur de d√©veloppement d√©marr√© sur http://localhost:3000');
      console.log('üìù Les modifications de polices sont maintenant actives !');
      resolve();
    }, 3000);
  });
}

// Fonction principale
async function restartDevServer() {
  try {
    console.log('üîÑ Arr√™t des processus Node.js en cours...');
    await killNodeProcesses();

    console.log('‚è≥ Attente de 2 secondes...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    await startDevServer();
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  restartDevServer();
}

module.exports = { restartDevServer };
