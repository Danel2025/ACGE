#!/usr/bin/env node

/**
 * Script de migration pour g√©n√©rer des num√©ros de dossiers pour les dossiers existants
 * Date: 2025-09-23
 * Description: Ce script g√©n√®re automatiquement des num√©ros de dossiers pour tous les dossiers existants qui n'en ont pas
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes:')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úì' : '‚úó')
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úì' : '‚úó')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

/**
 * G√©n√®re un num√©ro de dossier unique
 */
function generateNumeroDossier() {
  const year = new Date().getFullYear()
  const randomNum = Math.floor(Math.random() * 1000).toString().padStart(3, '0')
  return `DOSS-ACGE-${year}${randomNum}`
}

/**
 * V√©rifie si un num√©ro de dossier existe d√©j√†
 */
async function checkNumeroDossierExists(numeroDossier) {
  const { data, error } = await supabase
    .from('folders')
    .select('id')
    .eq('numeroDossier', numeroDossier)
    .maybeSingle()

  return !!data
}

/**
 * G√©n√®re un num√©ro de dossier unique
 */
async function generateUniqueNumeroDossier() {
  let numeroDossier
  let attempts = 0
  const maxAttempts = 100

  do {
    numeroDossier = generateNumeroDossier()
    attempts++
  } while (await checkNumeroDossierExists(numeroDossier) && attempts < maxAttempts)

  if (attempts >= maxAttempts) {
    throw new Error('Impossible de g√©n√©rer un num√©ro de dossier unique apr√®s 100 tentatives')
  }

  return numeroDossier
}

/**
 * Migre les dossiers existants
 */
async function migrateExistingFolders() {
  console.log('üöÄ D√©but de la migration des num√©ros de dossiers...')

  try {
    // R√©cup√©rer tous les dossiers sans num√©ro
    const { data: folders, error: fetchError } = await supabase
      .from('folders')
      .select('id, name, numeroDossier')
      .is('numeroDossier', null)

    if (fetchError) {
      throw fetchError
    }

    console.log(`üìÅ ${folders.length} dossiers trouv√©s sans num√©ro de dossier`)

    if (folders.length === 0) {
      console.log('‚úÖ Tous les dossiers ont d√©j√† un num√©ro de dossier')
      return
    }

    // Traiter chaque dossier
    const results = {
      success: 0,
      errors: 0
    }

    for (const folder of folders) {
      try {
        console.log(`üîÑ Traitement du dossier "${folder.name}" (ID: ${folder.id})`)

        // G√©n√©rer un num√©ro unique
        const numeroDossier = await generateUniqueNumeroDossier()

        // Mettre √† jour le dossier
        const { error: updateError } = await supabase
          .from('folders')
          .update({ numeroDossier })
          .eq('id', folder.id)

        if (updateError) {
          throw updateError
        }

        console.log(`‚úÖ Dossier "${folder.name}" mis √† jour avec le num√©ro: ${numeroDossier}`)
        results.success++

      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration du dossier "${folder.name}":`, error.message)
        results.errors++
      }
    }

    console.log('\nüìä R√©sum√© de la migration:')
    console.log(`‚úÖ Dossiers mis √† jour avec succ√®s: ${results.success}`)
    console.log(`‚ùå Erreurs: ${results.errors}`)
    console.log(`üìà Taux de succ√®s: ${((results.success / folders.length) * 100).toFixed(1)}%`)

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors de la migration:', error)
    process.exit(1)
  }
}

/**
 * V√©rifie la structure de la table folders
 */
async function checkTableStructure() {
  console.log('üîç V√©rification de la structure de la table folders...')

  try {
    const { data, error } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT column_name, data_type, is_nullable
          FROM information_schema.columns
          WHERE table_name = 'folders' AND column_name = 'numeroDossier'
        `
      })

    if (error) {
      console.error('‚ùå Erreur lors de la v√©rification de la structure:', error)
      return false
    }

    if (data && data.length > 0) {
      console.log('‚úÖ Colonne numeroDossier trouv√©e dans la table folders')
      return true
    } else {
      console.error('‚ùå Colonne numeroDossier non trouv√©e dans la table folders')
      console.error('‚ö†Ô∏è  Veuillez d\'abord ex√©cuter la migration pour ajouter cette colonne')
      return false
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
    return false
  }
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üîß Script de migration des num√©ros de dossiers ACGE')
  console.log('=' .repeat(50))

  // V√©rifier la structure de la table
  const hasColumn = await checkTableStructure()

  if (!hasColumn) {
    console.log('\n‚ùå Migration annul√©e - Colonne numeroDossier manquante')
    process.exit(1)
  }

  // Lancer la migration
  await migrateExistingFolders()

  console.log('\nüéâ Migration termin√©e!')
  console.log('üí° Les nouveaux dossiers cr√©√©s auront automatiquement un num√©ro g√©n√©r√©')
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error)
  process.exit(1)
})

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error)
  process.exit(1)
})

// Lancer le script
main()
