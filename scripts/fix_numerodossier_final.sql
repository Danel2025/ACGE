-- Script FINAL pour corriger la colonne numeroDossier (g√©rer tous les cas)
-- Date: 2025-09-23
-- Ce script force la correction quel que soit l'√©tat actuel

-- 1. V√©rifier l'√©tat actuel complet de la table
SELECT '=== √âTAT ACTUEL DE LA TABLE FOLDERS ===' as diagnostic_info;
SELECT
    column_name,
    data_type,
    is_nullable,
    column_default,
    CASE
        WHEN column_name = 'numerodossier' THEN '‚ùå COLONNE EN MINUSCULES (√Ä RENOMMER)'
        WHEN column_name = 'numeroDossier' THEN '‚úÖ COLONNE EN CAMELCASE (OK)'
        ELSE 'üìã AUTRE COLONNE'
    END as status
FROM information_schema.columns
WHERE table_name = 'folders'
ORDER BY ordinal_position;

-- 2. V√©rifier sp√©cifiquement les colonnes numeroDossier
SELECT '=== V√âRIFICATION SP√âCIFIQUE DES COLONNES NUMERODOSSIER ===' as specific_check;
SELECT
    'V√©rification colonne numerodossier (minuscules):' as check_type,
    CASE
        WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'folders' AND column_name = 'numerodossier')
        THEN '‚ùå TROUV√âE (doit √™tre renomm√©e)'
        ELSE '‚úÖ NON TROUV√âE'
    END as result
UNION ALL
SELECT
    'V√©rification colonne numeroDossier (camelCase):' as check_type,
    CASE
        WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'folders' AND column_name = 'numeroDossier')
        THEN '‚úÖ TROUV√âE (colonne correcte)'
        ELSE '‚ùå NON TROUV√âE'
    END as result;

-- 3. Corriger le probl√®me - approche forc√©e
DO $$
DECLARE
    numerodossier_exists BOOLEAN := EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'folders'
        AND column_name = 'numerodossier'
    );
    numerodossier_camel_exists BOOLEAN := EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'folders'
        AND column_name = 'numeroDossier'
    );
    numerodossier_data_exists BOOLEAN := EXISTS (
        SELECT 1 FROM folders WHERE numerodossier IS NOT NULL
    );
BEGIN
    RAISE NOTICE '=== DIAGNOSTIC AVANT CORRECTION ===';
    RAISE NOTICE 'Colonne numerodossier (minuscules) existe: %', numerodossier_exists;
    RAISE NOTICE 'Colonne numeroDossier (camelCase) existe: %', numerodossier_camel_exists;
    RAISE NOTICE 'Donn√©es dans numerodossier: %', numerodossier_data_exists;

    -- Cas 1: Colonne en minuscules existe mais pas en camelCase
    IF numerodossier_exists AND NOT numerodossier_camel_exists THEN
        RAISE NOTICE '‚úÖ SC√âNARIO 1: Renommage de numerodossier vers numeroDossier';

        -- √âtape 1: Cr√©er une colonne temporaire si n√©cessaire
        IF numerodossier_data_exists THEN
            -- Copier les donn√©es vers une colonne temporaire
            ALTER TABLE folders ADD COLUMN IF NOT EXISTS temp_numerodossier_backup TEXT;
            UPDATE folders SET temp_numerodossier_backup = numerodossier;
            RAISE NOTICE '‚úÖ Donn√©es sauvegard√©es dans temp_numerodossier_backup';
        END IF;

        -- √âtape 2: Renommer la colonne
        ALTER TABLE folders RENAME COLUMN numerodossier TO numeroDossier;
        RAISE NOTICE '‚úÖ Colonne renomm√©e de numerodossier vers numeroDossier';

        -- √âtape 3: Restaurer les donn√©es si n√©cessaire
        IF numerodossier_data_exists THEN
            UPDATE folders SET numeroDossier = temp_numerodossier_backup;
            RAISE NOTICE '‚úÖ Donn√©es restaur√©es dans numeroDossier';
        END IF;

    -- Cas 2: Les deux colonnes existent (probl√®me majeur)
    ELSIF numerodossier_exists AND numerodossier_camel_exists THEN
        RAISE NOTICE '‚ö†Ô∏è SC√âNARIO 2: Les deux colonnes existent - consolidation n√©cessaire';

        -- Copier les donn√©es de la colonne minuscules vers camelCase si diff√©rentes
        UPDATE folders
        SET numeroDossier = numerodossier
        WHERE numeroDossier IS NULL AND numerodossier IS NOT NULL;

        -- Supprimer la colonne minuscules (garder seulement camelCase)
        ALTER TABLE folders DROP COLUMN numerodossier;
        RAISE NOTICE '‚úÖ Colonne numerodossier supprim√©e, donn√©es consolid√©es dans numeroDossier';

    -- Cas 3: Aucune colonne n'existe (tr√®s improbable)
    ELSIF NOT numerodossier_exists AND NOT numerodossier_camel_exists THEN
        RAISE NOTICE '‚ùå SC√âNARIO 3: Aucune colonne numeroDossier trouv√©e - cr√©ation n√©cessaire';
        ALTER TABLE folders ADD COLUMN numeroDossier TEXT UNIQUE;
        RAISE NOTICE '‚úÖ Colonne numeroDossier cr√©√©e';

    -- Cas 4: Colonne camelCase existe d√©j√† (parfait)
    ELSE
        RAISE NOTICE '‚úÖ SC√âNARIO 4: Colonne numeroDossier existe d√©j√† dans le bon format';
    END IF;

    -- 4. Ajouter le commentaire et l'index
    IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'folders'
        AND column_name = 'numeroDossier'
    ) THEN
        -- Ajouter le commentaire
        COMMENT ON COLUMN folders.numeroDossier IS 'Num√©ro de dossier comptable g√©n√©r√© automatiquement avec format DOSS-ACGE-YYYYXXX';
        RAISE NOTICE '‚úÖ Commentaire ajout√© sur la colonne numeroDossier';

        -- Cr√©er l'index si n√©cessaire
        IF NOT EXISTS (
            SELECT 1 FROM pg_indexes
            WHERE tablename = 'folders'
            AND indexname = 'idx_folders_numero_dossier'
        ) THEN
            CREATE INDEX idx_folders_numero_dossier ON folders(numeroDossier);
            RAISE NOTICE '‚úÖ Index cr√©√© sur numeroDossier';
        ELSE
            RAISE NOTICE '‚úÖ Index d√©j√† existant';
        END IF;
    END IF;

    RAISE NOTICE '=== CORRECTION TERMIN√âE ===';
END $$;

-- 5. Afficher le r√©sultat final
SELECT '=== R√âSULTAT FINAL APR√àS CORRECTION ===' as final_result;
SELECT
    'folders' as table_name,
    column_name,
    data_type,
    is_nullable,
    column_default,
    CASE
        WHEN column_name = 'numeroDossier' THEN '‚úÖ COLONNE CORRIG√âE'
        ELSE 'üìã COLONNE AUTRE'
    END as status
FROM information_schema.columns
WHERE table_name = 'folders'
ORDER BY ordinal_position;

-- 6. V√©rifier que l'index existe
SELECT '=== V√âRIFICATION INDEX ===' as index_check;
SELECT
    schemaname,
    tablename,
    indexname,
    indexdef
FROM pg_indexes
WHERE tablename = 'folders'
ORDER BY indexname;
